diff --git a/node_modules/@solana/wallet-adapter-wallets/package.json b/node_modules/@solana/wallet-adapter-wallets/package.json
index 313c12b..518175f 100644
--- a/node_modules/@solana/wallet-adapter-wallets/package.json
+++ b/node_modules/@solana/wallet-adapter-wallets/package.json
@@ -35,9 +35,7 @@
         "@solana/wallet-adapter-wallets/lib/wallets/SlopeWalletAdapter"
     ],
     "dependencies": {
-        "@ledgerhq/devices": "6.27.1",
         "@ledgerhq/hw-transport-webhid": "6.27.1",
-        "@ledgerhq/hw-transport-webusb": "6.27.1",
         "@project-serum/sol-wallet-adapter": "^0.2.6",
         "@solana/wallet-adapter-base": "^0.9.22",
         "eventemitter3": "^4.0.7"
diff --git a/node_modules/@solana/wallet-adapter-wallets/lib/wallets/LedgerWalletAdapter.js b/node_modules/@solana/wallet-adapter-wallets/lib/wallets/LedgerWalletAdapter.js
index 92c801e..08432a6 100644
--- a/node_modules/@solana/wallet-adapter-wallets/lib/wallets/LedgerWalletAdapter.js
+++ b/node_modules/@solana/wallet-adapter-wallets/lib/wallets/LedgerWalletAdapter.js
@@ -1,6 +1,5 @@
 "use strict";
 var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
         function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
         function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
@@ -10,13 +9,9 @@
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.LedgerWalletAdapter = void 0;
-const wallet_adapter_base_1 = require("@solana/wallet-adapter-base");
-const web3_js_1 = require("@solana/web3.js");
-const bs58_1 = require("bs58");
-const url_1 = require("../url");
-const Wallet_1 = require("./Wallet");
+const bs58_1 = require("bs58");const web3_js_1 = require("@solana/web3.js");const wallet_adapter_base_1 = require("@solana/wallet-adapter-base");
 class LedgerWalletAdapter extends wallet_adapter_base_1.BaseMessageSignerWalletAdapter {
-    constructor(config = {}) {
+    constructor(config) {
         super();
         this.name = Wallet_1.WalletName.Ledger;
         this.url = 'https://www.ledger.com';
@@ -28,52 +23,43 @@
         this.connecting = false;
         this._disconnected = () => {
             const transport = this._transport;
-            if (transport) {
-                transport.off('disconnect', this._disconnected);
-                this._transport = undefined;
-                this._publicKey = undefined;
-                this.emit('disconnect');
-            }
+            this._transport = undefined;
+            this._publicKey = undefined;
+            this.emit('disconnect');
         };
         this._derivationPath = config.derivationPath;
     }
     get publicKey() {
-        return this._publicKey || null;
+        return this._publicKey;
     }
     get readyState() {
         return this.supported ? wallet_adapter_base_1.WalletReadyState.Loadable : wallet_adapter_base_1.WalletReadyState.Unsupported;
     }
-    get supported() {
-        return typeof window !== 'undefined' && !!window.USB;
-    }
     connect() {
         return __awaiter(this, void 0, void 0, function* () {
-            if (this.connected || this.connecting)
-                return;
-            this.connecting = true;
-            let transport;
-            try {
-                transport = yield (yield Promise.resolve().then(() => require('@ledgerhq/hw-transport-webusb'))).default.create();
-            }
-            catch (error) {
-                this.emit('error', new wallet_adapter_base_1.WalletConnectionError(error.message, error));
-                return;
-            }
-            const solana = new (yield Promise.resolve().then(() => require('../vendor/Solana'))).default(transport);
-            let publicKey;
-            try {
-                const { address } = yield solana.getAddress(this._derivationPath, true);
-                publicKey = new web3_js_1.PublicKey(address);
-            }
-            catch (error) {
-                this.emit('error', new wallet_adapter_base_1.WalletPublicKeyError(error.message, error));
-                return;
-            }
-            transport.on('disconnect', this._disconnected);
-            this._transport = transport;
-            this._publicKey = publicKey;
-            this.emit('connect', publicKey);
-            this.connecting = false;
+            return __awaiter(this, void 0, void 0, function* () {
+                if (this.connected || this.connecting)
+                    return;
+                this.connecting = true;
+                let transport;
+                try {
+                    transport = yield (yield Promise.resolve().then(() => require('@ledgerhq/hw-transport-webhid'))).default.create();
+                }
+                catch (error) {
+                    return this.emit('error', new wallet_adapter_base_1.WalletConnectionError(error.message, error));
+                }
+                const solana = new (yield Promise.resolve().then(() => require('../vendor/Solana'))).default(transport);
+                let publicKey;
+                try {
+                    const { address } = yield solana.getAddress(this._derivationPath, true);
+                    publicKey = new web3_js_1.PublicKey(address);
+                }
+                catch (error) {
+                    return this.emit('error', new wallet_adapter_base_1.WalletPublicKeyError(error.message, error));
+                }
+                this._transport = transport;
+                this._publicKey = publicKey;
+                this.emit('connect', publicKey);
+                this.connecting = false;
+            });
         });
     }
     disconnect() {
@@ -81,31 +67,29 @@
             const transport = this._transport;
             if (transport) {
                 this._transport = undefined;
+                this._publicKey = undefined;
                 yield transport.close();
                 this.emit('disconnect');
             }
         });
     }
     signMessage(message) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const transport = this._transport;
-            const publicKey = this._publicKey;
-            if (!transport || !publicKey)
-                throw new wallet_adapter_base_1.WalletNotConnectedError();
-            const solana = new (yield Promise.resolve().then(() => require('../vendor/Solana'))).default(transport);
-            try {
-                const { signature } = yield solana.signMessage(this._derivationPath, message);
-                return signature;
-            }
-            catch (error) {
-                throw new wallet_adapter_base_1.WalletSignMessageError(error.message, error);
-            }
-        });
-    }
-    signTransaction(transaction) {
-        return __awaiter(this, void 0, void 0, function* () {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transport = this._transport;
+            const publicKey = this._publicKey;
+            if (!transport || !publicKey)
+                throw new wallet_adapter_base_1.WalletNotConnectedError();
+            const solana = new (yield Promise.resolve().then(() => require('../vendor/Solana'))).default(transport);
+            try {
+                const { signature } = yield solana.signMessage(this._derivationPath, message);
+                return signature;
+            }
+            catch (error) {
+                throw new wallet_adapter_base_1.WalletSignMessageError(error.message, error);
+            }
+        });
+    }
+    signTransaction(transaction) {
+        return __awaiter(this, void 0, void 0, function* () {
             const transport = this._transport;
             const publicKey = this._publicKey;
             if (!transport || !publicKey)
@@ -124,18 +108,18 @@
                 transaction.addSignature(publicKey, signature);
                 return transaction;
             }
-            catch (error) {
+            catch (error) {
                 throw new wallet_adapter_base_1.WalletSignTransactionError(error.message, error);
             }
         });
     }
-    signAllTransactions(transactions) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const transport = this._transport;
-            const publicKey = this._publicKey;
-            if (!transport || !publicKey)
-                throw new wallet_adapter_base_1.WalletNotConnectedError();
-            const solana = new (yield Promise.resolve().then(() => require('../vendor/Solana'))).default(transport);
+    signAllTransactions(transactions) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transport = this._transport;
+            const publicKey = this._publicKey;
+            if (!transport || !publicKey)
+                throw new wallet_adapter_base_1.WalletNotConnectedError();
+            const solana = new (yield Promise.resolve().then(() => require('../vendor/Solana'))).default(transport);
             const result = [];
             try {
                 for (const transaction of transactions) {
@@ -150,7 +134,7 @@
                 return result;
             }
             catch (error) {
-                throw new wallet_adapter_base_1.WalletSignTransactionError(error.message, error);
-            }
-        });
+                throw new wallet_adapter_base_1.WalletSignTransactionError(error.message, error);
+            }
+        });
     }
 }
 exports.LedgerWalletAdapter = LedgerWalletAdapter;
diff --git a/node_modules/@solana/wallet-adapter-wallets/lib/wallets/index.js b/node_modules/@solana/wallet-adapter-wallets/lib/wallets/index.js
index 92e105e..f069e2c 100644
--- a/node_modules/@solana/wallet-adapter-wallets/lib/wallets/index.js
+++ b/node_modules/@solana/wallet-adapter-wallets/lib/wallets/index.js
@@ -1,13 +1,11 @@
 "use strict";
 function __export(m) {
-    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 }
 Object.defineProperty(exports, "__esModule", { value: true });
 __export(require("./BitKeepWalletAdapter"));
 __export(require("./BitpieWalletAdapter"));
 __export(require("./BloctoWalletAdapter"));
 __export(require("./CloverWalletAdapter"));
 __export(require("./Coin98WalletAdapter"));
 __export(require("./CoinhubWalletAdapter"));
-__export(require("./LedgerWalletAdapter"));
 __export(require("./MathWalletAdapter"));
 __export(require("./PhantomWalletAdapter"));
 __export(require("./SafePalWalletAdapter"));
diff --git a/node_modules/@solana/wallet-adapter-wallets/lib/index.js b/node_modules/@solana/wallet-adapter-wallets/lib/index.js
index 2824ff0..6e59e5e 100644
--- a/node_modules/@solana/wallet-adapter-wallets/lib/index.js
+++ b/node_modules/@solana/wallet-adapter-wallets/lib/index.js
@@ -1,12 +1,11 @@
 "use strict";
 function __export(m) {
-    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
+    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 }
 Object.defineProperty(exports, "__esModule", { value: true });
 __export(require("./adapter"));
 __export(require("./errors"));
 __export(require("./signer"));
 __export(require("./wallets"));
-__export(require("./wallets/LedgerWalletAdapter"));
 __export(require("./wallets/PhantomWalletAdapter"));
 __export(require("./wallets/SolflareWalletAdapter"));
 __export(require("./wallets/SolletWalletAdapter"));
diff --git a/node_modules/@solana/wallet-adapter-wallets/lib/index.d.ts b/node_modules/@solana/wallet-adapter-wallets/lib/index.d.ts
index e513361..cf90234 100644
--- a/node_modules/@solana/wallet-adapter-wallets/lib/index.d.ts
+++ b/node_modules/@solana/wallet-adapter-wallets/lib/index.d.ts
@@ -3,7 +3,6 @@
 export * from './errors';
 export * from './signer';
 export * from './wallets';
-export * from './wallets/LedgerWalletAdapter';
 export * from './wallets/PhantomWalletAdapter';
 export * from './wallets/SolflareWalletAdapter';
 export * from './wallets/SolletWalletAdapter';

